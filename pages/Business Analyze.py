import streamlit as st
import pandas as pd
import json
from io import StringIO

try:
    from tc_complete import ToolExecutor
    from tc_analyze_review import ReviewTools
    from tc_get_product_info import ProductTools, PRODUCT_DB
except ImportError as e:
    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•: {e}")
    st.error("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå tc_complete.py, tc_analyze_review.py, ‡πÅ‡∏•‡∏∞ tc_get_product_info.py ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop()

@st.cache_resource
def load_executor():
    """Load and register tools into the executor."""
    try:
        executor = ToolExecutor()
        review_tool_instance = ReviewTools()
        product_tool_instance = ProductTools()
        
        executor.register_tools(review_tool_instance)
        executor.register_tools(product_tool_instance)
        
        print("‚úÖ Tools have been successfully registered in Streamlit.")
        return executor
    except Exception as e:
        st.error(f"Tool registration failed: {e}")
        return None

st.set_page_config(
    page_title="Business Insights Dashboard",
    page_icon="‚ú®",
    layout="wide"
)

st.title("‚ú® KAGE Business Insights Dashboard")
st.markdown("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

executor = load_executor()

if executor is None:
    st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Tool Executor ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.stop()

tab1, tab2 = st.tabs(["üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Review Analysis)", "üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå (Strategic Product Info)"])

with tab1:
    st.header("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
    st.markdown("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ LLM ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå sentiment, ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á-‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô, ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå")

    product_options = [
        "‡∏•‡∏¥‡∏õ‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î (Syrup Glossy Lip)",
        "‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ö‡∏•‡∏±‡∏ä (Filter Brush)",
        "‡∏Ñ‡∏≠‡∏•‡∏ã‡∏µ‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå & ‡∏Ñ‡∏≠‡πÄ‡∏£‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏¢‡∏≤‡∏á‡∏•‡∏ö (Fluffy Cloud Concealer & Corrector)",
        "‡∏Ñ‡∏∏‡∏ä‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏™‡∏Å‡∏ú‡∏¥‡∏ß (Velvet Cloud Cushion)",
        "‡∏°‡∏≤‡∏™‡∏Ñ‡∏≤‡∏£‡πà‡∏≤‡∏Ñ‡∏¥‡πâ‡∏ß (Truebrow Mybrow Macara)"
    ]
    product_name = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
        options=product_options
    )

    st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
    input_method = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:", ("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV", "‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"), horizontal=True)
    
    review_texts = []
    uploaded_file = None
    temp_csv_path = "temp_uploaded_reviews.csv"

    if input_method == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV":
        uploaded_file = st.file_uploader(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠ 'review')", 
            type=['csv']
        )
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                if 'review' not in df.columns and '\ufeffreview' not in df.columns:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'review' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
                else:
                    df.to_csv(temp_csv_path, index=False, encoding='utf-8-sig')
                    review_count = len(df)
                    st.success(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏ö {review_count} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
                    st.dataframe(df.head(), use_container_width=True)
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")

    else:  
        pasted_reviews = st.text_area(
            "‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà)", 
            height=250,
            placeholder="‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏•‡∏¥‡∏õ‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏™‡∏µ‡∏™‡∏ß‡∏¢ ‡∏ï‡∏¥‡∏î‡∏ó‡∏ô\n‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡πÄ‡∏•‡∏¢\n‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πâ‡∏≤ ‡πÅ‡∏ï‡πà‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡πÇ‡∏≠‡πÄ‡∏Ñ"
        )
        if pasted_reviews:
            review_texts = [line.strip() for line in pasted_reviews.split('\n') if line.strip()]
            st.info(f"‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(review_texts)} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    analyze_button = st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß!", type="primary", use_container_width=True)

    if analyze_button:

        expert_prompt = """
        ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ **‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå (Product Strategy Analyst)** ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‚Äù  
        ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå  
        ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Executive Summary ‡πÅ‡∏¢‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏ä‡∏∏‡∏î‡∏´‡∏ô‡∏∂‡πà‡∏á

        **‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Markdown ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô** ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ã‡πâ‡∏≥‡∏ï‡∏≠‡∏ô‡∏ó‡πâ‡∏≤‡∏¢  
        ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô  
        ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ `<br>` ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÅ‡∏ó‡∏ô

        ### ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
        #### 1. ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (Analysis Overview)
        - ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ‡∏ö‡∏ß‡∏Å / ‡∏Å‡∏•‡∏≤‡∏á / ‡∏•‡∏ö
        - ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à

        | ‡πÅ‡∏á‡πà‡∏°‡∏∏‡∏° (Aspect) | ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á (Positive) | ‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô (Negative) |
        |------------------|---------------------|----------------------|
        | ... | ... | ... |

        #### 2. ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå (Strategic Recommendations)
        | ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ (Topic) | ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ (Actionable Recommendation) | ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á (Expected KPI) |
        |-----------------|------------------------------------------|-------------------------------|
        | Product & Packaging | ... | ... |
        | Marketing & Communication | ... | ... |
        | Customer Service & Operation | ... | ... |

        **‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:**
        - ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à  
        - ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á JSON, log, ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        - ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ 100%
        """


        if uploaded_file:
            user_message = f"""
            ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ Tool 'analyze_review' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{product_name}' ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå csv_path: '{temp_csv_path}'

            {expert_prompt}
            """
        elif review_texts:
            reviews_str = "\\n".join(review_texts)
            user_message = f"""
            ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ Tool 'analyze_review' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{product_name}' (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á):
            ---
            {reviews_str}
            ---
        
            {expert_prompt}
            """
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            st.stop()

        st.markdown("---")
        st.subheader(f"‚ú® Executive Summary: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {product_name}")
        st.info("üí° ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å LLM ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤")
        
        with st.spinner("üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß... ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
            try:
                result = executor.execute_with_tools(user_message)
                header_1 = "1. ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (Analysis Overview)"
                header_2 = "2. ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå (Strategic Recommendations)"
                    
                start_1 = result.find(header_1)
                start_2 = result.find(header_2)

                with st.expander("üìä Analysis Overview", expanded=True):
                    if start_1 != -1 and start_2 != -1:
                        st.markdown(result[start_1:start_2], unsafe_allow_html=True)
                    else:
                        st.markdown(result, unsafe_allow_html=True)

                with st.expander("üöÄ Strategic Recommendations", expanded=True):
                    if start_2 != -1:
                        st.markdown(result[start_2:], unsafe_allow_html=True)
                    else:
                        st.markdown(result, unsafe_allow_html=True)

            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {e}")

with tab2:
    st.header("üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå")
    st.markdown(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ID ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á-‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô, ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° Personal Color ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"
    )

    available_ids = list(PRODUCT_DB.keys())
    selected_id = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Product ID:", options=available_ids)

    if st.button("üîç ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå", key="tab2_generate_report", type="primary", use_container_width=True):
        product_tool_instance = ProductTools()
        product_info = product_tool_instance.get_product_info(selected_id)

        if "error" in product_info:
            st.error(product_info["error"])
        else:
            st.success("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

            core_value = product_info["strategic_value_proposition"]
            price_flex = product_info["pricing_flexibility_index"]
            total_shades = product_info["total_number_of_shades"]
            personal_color = product_info["personal_color_coverage"]

            exec_summary_md = f"""
            - **üíé Core Value Proposition:** {core_value}
            - **üí∞ Pricing Flexibility:** {price_flex}
            - **üé® Total Number of Shades:** {total_shades}
            """
            with st.expander("üìä Executive Summary", expanded=True):
                st.markdown(exec_summary_md)

            pc_rows = []
            for pc_group, shades_list in personal_color.items():
                for shade in shades_list:
                    if ": " in shade:
                        name, desc = shade.split(": ", 1)
                    else:
                        name, desc = shade, ""
                    pc_rows.append({
                        "Personal Color": pc_group,
                        "Shade Name": name,
                        "Description": desc[:50]+"..."
                    })
            df_pc = pd.DataFrame(pc_rows)
            with st.expander("üé® Personal Color Coverage", expanded=True):
                st.dataframe(df_pc.style.set_properties(**{'text-align': 'left'}), use_container_width=True)

            prompt_90day = f"""
            ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ **‡∏ô‡∏±‡∏Å‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå** ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID {selected_id} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á **90-Day Action Plan** Markdown ‡∏ï‡∏≤‡∏£‡∏≤‡∏á 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:
            1. ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å  
            2. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á  
            3. KPI/Metrics

            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:
            - Core Value Proposition: {core_value}
            - Pricing Flexibility: {price_flex}
            - Personal Color Coverage: {list(personal_color.keys())}

            **‡∏Ç‡πâ‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö:** - ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô Markdown ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô  
            - ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
            """
            
            with st.spinner("üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á 90-Day Action Plan..."):
                try:
                    action_plan_md = executor.execute_with_tools(prompt_90day)
                    with st.expander("üöÄ 90-Day Action Plan", expanded=True):
                        st.markdown(action_plan_md, unsafe_allow_html=True)
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á 90-Day Action Plan: {e}")

PASTEL_BLUE = "#AEC6CF" 
ACCENT_BLUE = "#779ECB" 
WHITE = "#FFFFFF" 
LIGHT_PASTEL_BLUE = "#C7DBF0" 
BLACK = "#000000"

st.markdown(
    f"""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap');
        
        /* Global font override */
        body, #root, .stApp, .main, 
        [data-testid="stAppViewContainer"], 
        .main * {{
            font-family: 'Kanit', sans-serif !important;
            color: {BLACK} !important; 
        }}

        /* Paragraphs and markdown text */
        p,
        div[data-testid="stVerticalBlock"] p,
        [data-testid="stMetricValue"], 
        [data-testid="stAlert"] p {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 400 !important;
        }}

        /* Headings */
        h1, h2, h3, h4, h5, h6 {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 700 !important; 
        }}

        /* Labels & metrics */
        label p,
        [data-testid*="stForm"] label p,
        [data-testid*="stSelectbox"] label p,
        [data-testid="stMetricLabel"] p {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 500 !important; 
        }}
        
        /* Dataframe font fix */
        .stDataFrame table, 
        .stDataFrame table th, 
        .stDataFrame table td {{
            font-family: 'Kanit', sans-serif !important;
        }}
        
        /* Inputs, selectbox, radio, buttons */
        div[data-baseweb="select"] *,
        div[data-baseweb="input"] *,
        div[data-baseweb="textarea"] *,
        div[data-baseweb="radio"] *,
        div[data-baseweb="button"] * {{
            font-family: 'Kanit', sans-serif !important;
        }}
        
        /* Tabs */
        button[data-baseweb="tab"] * {{
            font-family: 'Kanit', sans-serif !important;
        }}
        
        /* Expanders */
        [data-testid="stExpander"] div[role="button"] p {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 600 !important; 
        }}

        /* Sidebar */
        section[data-testid="stSidebar"] {{
            background-color: {LIGHT_PASTEL_BLUE} !important; 
            border-right: 1px solid #CCCCCC;
        }}
        
        /* Global background */
        body, #root, .stApp, .main, 
        [data-testid="stAppViewContainer"], 
        [data-testid="stSpinner"] > div {{
            background-color: {WHITE} !important;
        }}

    </style>
    """, 
    unsafe_allow_html=True
)
