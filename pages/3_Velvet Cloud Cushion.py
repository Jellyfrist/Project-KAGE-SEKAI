import streamlit as st
from PIL import Image
import os
from dotenv import load_dotenv
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from datetime import datetime # <<< ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ datetime ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤

# --- CONFIGURATION & PAGE SETUP ---

st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- CONSTANTS ---
FIXED_PRODUCT_ID = "C002"
FIXED_PRODUCT_NAME = "‡∏Ñ‡∏∏‡∏ä‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏™‡∏Å‡∏ú‡∏¥‡∏ß (C002)" 

# **‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å: ‡πÉ‡∏ä‡πâ Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Rerun**
CURRENT_PAGE_KEY = f"chat_messages_{FIXED_PRODUCT_ID}"

# --- SESSION STATE INITIALIZATION AND CLEAR FUNCTION ---

# 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Session State
if CURRENT_PAGE_KEY not in st.session_state:
    st.session_state[CURRENT_PAGE_KEY] = [] # ‡πÄ‡∏Å‡πá‡∏ö messages ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô key ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
if "current_page_load_key" not in st.session_state:
    st.session_state["current_page_load_key"] = None 

# 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏ä‡∏ó ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤"
def clear_chat_on_page_change():
    """
    Clears the chat history only if the app detects a navigation event (page change).
    It compares the CURRENT_PAGE_KEY with the last loaded key in session state.
    """
    # ‡∏ñ‡πâ‡∏≤ Key ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Key ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Session State 
    if st.session_state["current_page_load_key"] != CURRENT_PAGE_KEY:
        st.session_state[CURRENT_PAGE_KEY] = []
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Key ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Key ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
        st.session_state["current_page_load_key"] = CURRENT_PAGE_KEY

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
clear_chat_on_page_change()


# --- HEADER & PRODUCT INFO ---
try:
    header_img = Image.open("assets/Cushion.png")
except FileNotFoundError:
    header_img = None

if header_img:
    st.image(header_img, use_container_width=True)
st.markdown("<br>", unsafe_allow_html=True)

st.title("KAGE VELVET CLOUD CUSHION SPF 50 PA+++ | ‡∏Ñ‡∏∏‡∏ä‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏™‡∏Å‡∏ú‡∏¥‡∏ß")
st.markdown("""
‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ä‡∏ä‡∏±‡πà‡∏ô ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡∏ö‡∏≤‡∏á‡πÄ‡∏ö‡∏≤ ‡πÄ‡∏Å‡∏•‡∏µ‡πà‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏°‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö Medium‚ÄìFull Coverage ¬†

‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≥ ‡∏Å‡∏±‡∏ô‡πÄ‡∏´‡∏á‡∏∑‡πà‡∏≠ ‡∏ï‡∏¥‡∏î‡∏ó‡∏ô 12 ‡∏ä‡∏°. ‡πÅ‡∏•‡∏∞‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ú‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏î‡πâ‡∏ß‡∏¢ SPF 50 PA+++
""", unsafe_allow_html=True)


# --- AI SETUP ---
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

PERSIST_DIR = "chroma_db"
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ API Key ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Embedding
llm_ready = True
db = None

if OPENAI_API_KEY:
    try:
        emb = OpenAIEmbeddings(model="text-embedding-3-small", openai_api_key=OPENAI_API_KEY)
        db = Chroma(
            persist_directory=PERSIST_DIR,
            embedding_function=emb,
            collection_name="kage_products"
        )
        llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0.1, openai_api_key=OPENAI_API_KEY)
    except Exception:
        llm_ready = False
else:
    llm_ready = False


PRODUCT_NAME_MAP = {
    "‡∏ö‡∏•‡∏±‡∏ä": "B001", "‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ö‡∏•‡∏±‡∏ä": "B001", "‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ö‡∏£‡∏±‡∏ä": "B001", "‡∏ö‡∏£‡∏±‡∏ä": "B001",
    "‡∏Ñ‡∏≠‡∏•‡∏ã‡∏µ‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏¢‡∏≤‡∏á‡∏•‡∏ö & ‡∏Ñ‡∏≠‡πÄ‡∏£‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏¢‡∏≤‡∏á‡∏•‡∏ö": "C001", "‡∏Ñ‡∏≠‡πÄ‡∏£‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏¢‡∏≤‡∏á‡∏•‡∏ö": "C001", "‡∏Ñ‡∏≠‡πÄ‡∏£‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå": "C001",
    "‡∏Ñ‡∏≠‡∏•‡∏ã‡∏µ‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå": "C001", "‡∏Ñ‡∏≠‡∏ô‡∏ã‡∏µ‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå": "C001", "‡∏Ñ‡∏≠‡∏•‡∏ã‡∏µ‡∏•‡πÄ‡∏•‡πà‡∏≠": "C001", "‡∏Ñ‡∏≠‡∏ô‡∏ã‡∏µ‡∏•‡πÄ‡∏•‡πà‡∏≠": "C001",
    "‡∏Ñ‡∏≠‡πÄ‡∏£‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå": "C001", "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå": "C001", "‡∏Ñ‡∏∏‡∏ä‡∏ä‡∏±‡πà‡∏ô": "C002", "‡∏Ñ‡∏∏‡∏ä‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏™‡∏Å‡∏ú‡∏¥‡∏ß": "C002",
    "‡∏•‡∏¥‡∏õ": "L001", "‡∏•‡∏¥‡∏õ‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î": "L001", "‡∏°‡∏≤‡∏™‡∏Ñ‡∏≤‡∏£‡πà‡∏≤": "M001", "‡∏°‡∏≤‡∏™‡∏Ñ‡∏≤‡∏£‡πà‡∏≤‡∏Ñ‡∏¥‡πâ‡∏ß": "M001",
}

prompt_template = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏®‡∏´‡∏ç‡∏¥‡∏á ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ KAGE ‚Äî ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏î‡∏≤‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û

Context:
----
{context}
----

User: {question}

Instructions:
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô 2‚Äì4 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏µ ‡∏Ç‡∏ô‡∏≤‡∏î ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞
"""

def build_prompt(retrieved_docs):
    context = ""
    for idx, doc in enumerate(retrieved_docs, 1):
        meta = doc.metadata
        context += f"[{idx}] ({meta.get('source_file')}) {doc.page_content}\n"
    return context

def answer_question(question, product_id=None, k=6):
    product_id = FIXED_PRODUCT_ID 
    filter = {"product_id": product_id}
    
    if not llm_ready:
        return {"answer": "‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å API Key ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LLM ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENAI_API_KEY.", "sources": []}
        
    if db is None:
        return {"answer": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", "sources": []}

    retrieved_docs = db.similarity_search(query=question, k=k, filter=filter)
    context_text = build_prompt(retrieved_docs)

    problem_keywords = ["‡πÄ‡∏™‡∏µ‡∏¢", "‡∏û‡∏±‡∏á", "‡πÅ‡∏Å‡πâ", "‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î", "‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á", "‡∏•‡πâ‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏á"]
    is_problem = any(word in question.lower() for word in problem_keywords)

    custom_prompt = prompt_template
    if not is_problem:
        # ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        custom_prompt = "".join([line for line in prompt_template.splitlines() if not line.startswith("- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ")])
    
    prompt_obj = PromptTemplate(input_variables=["context", "question"], template=custom_prompt)
    prompt_text = prompt_obj.format(context=context_text, question=question)

    answer = llm.predict(prompt_text)

    sources = [
        {"source_file": doc.metadata.get("source_file"), "chunk_id": doc.metadata.get("chunk_id")}
        for doc in retrieved_docs
    ]

    return {"answer": answer, "sources": sources}

# --- CHAT DISPLAY FUNCTION (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤, ‡∏•‡∏ö Sources) ---
def display_chat_message_content(message):
    content = message["content"]
    timestamp = message.get("time", "") # ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ

    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: (‡πÄ‡∏ß‡∏•‡∏≤) ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    full_content = f"<span style='font-size: 0.8em; color: gray;'>({timestamp})</span> {content}"
    
    st.markdown(full_content, unsafe_allow_html=True) 


# --- DISPLAY OLD MESSAGES ---

# ‡πÉ‡∏ä‡πâ st.container ‡∏´‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
chat_container = st.container()

with chat_container:
    # **‡πÉ‡∏ä‡πâ CURRENT_PAGE_KEY ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á messages**
    for msg in st.session_state[CURRENT_PAGE_KEY]:
        avatar = "üíñ" if msg["role"] == "assistant" else "üôã‚Äç‚ôÄÔ∏è" 
        with st.chat_message(msg["role"], avatar=avatar):
            display_chat_message_content(msg)


# --- CHAT INPUT & PROCESSING (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤, ‡∏•‡∏ö Sources) ---
prompt = st.chat_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...")

if prompt:
    current_time = datetime.now().strftime("%H:%M") # <<< ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    # 1. User message
    st.session_state[CURRENT_PAGE_KEY].append({
        "role": "user", 
        "content": prompt, 
        "sources": [], 
        "time": current_time # <<< ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
    })
    
    # 2. Display user message
    with st.chat_message("user", avatar="üôã‚Äç‚ôÄÔ∏è"): 
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤
        st.markdown(f"<span style='font-size: 0.8em; color: gray;'>({current_time})</span> {prompt}", unsafe_allow_html=True)

    product_id = FIXED_PRODUCT_ID
    st.session_state["product_context"] = product_id
    
    # 3. Get and display assistant response
    with st.chat_message("assistant", avatar="üíñ"): 
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°..."):
            resp = answer_question(question=prompt, product_id=product_id)

        assistant_time = datetime.now().strftime("%H:%M") # <<< ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤
        st.markdown(f"<span style='font-size: 0.8em; color: gray;'>({assistant_time})</span> {resp['answer']}", unsafe_allow_html=True)
        
        # 4. Save assistant response
        st.session_state[CURRENT_PAGE_KEY].append({ # **‡πÉ‡∏ä‡πâ CURRENT_PAGE_KEY ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å**
            "role":"assistant",
            "content": resp["answer"],
            "context_used": True,
            "sources": resp.get("sources", []),
            "time": assistant_time # <<< ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
        })

# --- CUSTOM CSS: FONT KANIT & UI STYLING (FINAL FIX) ---
PASTEL_BLUE = "#AEC6CF" 
ACCENT_BLUE = "#779ECB" 
WHITE = "#FFFFFF" 
LIGHT_PASTEL_BLUE = "#C7DBF0" 
BLACK = "#000000"

st.markdown("""
    <style>
        /* Import Kanit Font */
        @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap');

        /* 0. SCROLL FIX - Make the main content area scrollable if content exceeds height */
        [data-testid="stAppViewContainer"] > div > [data-testid="stVerticalBlock"] {{
            overflow-y: auto;
            max-height: calc(100vh - 100px); 
        }}

        /* 1. GLOBAL FONT FIX (Highest Specificity) */
        /* Targets the whole app and the most common text/div containers */
        body, #root, .stApp, .main, 
        [data-testid="stAppViewContainer"], 
        .main * {{
            font-family: 'Kanit', sans-serif !important;
            color: {BLACK} !important; 
        }}

        /* 2. HEADING FIXES */
        h1, h2, h3, h4, h5, h6, 
        [data-testid^="stHeader"] h1, 
        [data-testid^="stHeader"] h2
        {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 700 !important; 
        }}
        
        /* 3. PARAGRAPH/MARKDOWN FIX (Targets ALL generic text including the product description) */
        p,
        div[data-testid="stVerticalBlock"] p, 
        [data-testid="stAlert"] p,
        
        /* Fix text in input/select areas and expanders */
        label p,
        [data-baseweb="select"] *, 
        [data-baseweb="input"] *,
        [data-baseweb="textarea"] *,
        [data-baseweb="button"] *,
        [data-testid="stExpander"] div[role="button"] p 
        {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 400 !important; 
            line-height: 1.6; 
        }}
        
        /* === 4. CRITICAL CHAT BUBBLE FONT FIXES === */
        
        /* Targets all paragraph text inside a chat message, regardless of role */
        [data-testid="stChatMessage"] p {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 400 !important; 
            line-height: 1.6; 
        }}

        /* === 5. CHAT MESSAGE BOX STYLING (‡πÄ‡∏î‡∏¥‡∏°) === */
        
        /* Background & Text Color */
        body, #root, .stApp, .main, [data-testid="stAppViewContainer"], [data-testid="stSpinner"] > div {{ background-color: {WHITE} !important; }}
        section[data-testid="stSidebar"] {{ background-color: {LIGHT_PASTEL_BLUE} !important; border-right: 1px solid #CCCCCC; }}
        [data-testid="stSidebar"] * {{ color: {BLACK} !important; }}
        
        /* Message box width limit */
        [data-testid="stChatMessage"] div[data-testid="stVerticalBlock"] {{ max-width: 65% !important; }}
        
        /* Message box general shape */
        [data-testid="stChatMessage"] div.st-emotion-cache-p5m6iv {{ 
            border-radius: 15px !important;
            padding: 10px !important;
        }}
        
        /* USER: Align box right */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-user"] {{ flex-direction: row-reverse; }}
        /* ASSISTANT: Align box left */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-assistant"] {{ flex-direction: row; }}

        /* ASSISTANT: Box color */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-assistant"] div.st-emotion-cache-p5m6iv {{
            background-color: {LIGHT_PASTEL_BLUE} !important;
            color: {BLACK} !important;
        }}
        
        /* USER: Box color */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-user"] div.st-emotion-cache-p5m6iv {{
            background-color: {ACCENT_BLUE} !important;
            color: {WHITE} !important;
        }}
        
        /* USER: Text align right (Applies to Kanit text inside the box) */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-user"] div.st-emotion-cache-p5m6iv p {{
            text-align: right !important;
        }}
        
        /* ASSISTANT: Text align left (Applies to Kanit text inside the box) */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-assistant"] div.st-emotion-cache-p5m6iv p {{
            text-align: left !important;
        }}
        
        /* Chat Input Area */
        [data-testid="stAppViewContainer"] > div > div {{ background-color: {WHITE} !important; }}
        [data-testid="stChatInput"] {{
            background-color: {WHITE} !important;
            border: none !important;
            padding: 10px 0 !important;
        }}
        [data-testid="stChatInput"] > div > div {{
            background-color: {WHITE} !important; 
            color: {BLACK} !important; 
            border-radius: 8px !important;
            border: none !important;
        }}
        
    </style>
""".format(PASTEL_BLUE=PASTEL_BLUE, WHITE=WHITE, LIGHT_PASTEL_BLUE=LIGHT_PASTEL_BLUE, BLACK=BLACK, ACCENT_BLUE=ACCENT_BLUE), unsafe_allow_html=True)