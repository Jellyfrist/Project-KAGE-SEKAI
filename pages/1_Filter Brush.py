import streamlit as st
from PIL import Image
import os
from dotenv import load_dotenv
from langchain_openai import OpenAIEmbeddings 
from langchain_community.vectorstores import Chroma
from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from datetime import datetime  
import traceback

st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
)

FIXED_PRODUCT_ID = "B001"
FIXED_PRODUCT_NAME = "‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ö‡∏•‡∏±‡∏ä (B001)" 

CURRENT_PAGE_KEY = f"chat_messages_{FIXED_PRODUCT_ID}"


if CURRENT_PAGE_KEY not in st.session_state:
    st.session_state[CURRENT_PAGE_KEY] = []  
if "current_page_load_key" not in st.session_state:
    st.session_state["current_page_load_key"] = None 
if "product_context" not in st.session_state:
    st.session_state["product_context"] = None

def clear_chat_on_page_change():
    """
    Clears the chat history only if the app detects a navigation event (page change).
    If the key doesn't match the last run key, it's considered a new load/navigation.
    """
     
    if st.session_state["current_page_load_key"] != CURRENT_PAGE_KEY:
        st.session_state[CURRENT_PAGE_KEY] = []
        st.session_state["current_page_load_key"] = CURRENT_PAGE_KEY

clear_chat_on_page_change()

try:
    header_img = Image.open("assets/Filter Brush.png")
except Exception:
    header_img = None

if header_img:
    st.image(header_img, use_container_width=True)
st.markdown("<br>", unsafe_allow_html=True)

st.title("Filter Brush | ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ö‡∏•‡∏±‡∏ä")
st.markdown("""
‡∏Ñ‡∏£‡∏µ‡∏°‡∏ö‡∏•‡∏±‡∏ä‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏°‡∏≤ 11 ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏â‡∏î‡∏ú‡∏¥‡∏ß ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ú‡∏¥‡∏ß‡∏Ç‡∏≤‡∏ß ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏ú‡∏¥‡∏ß‡∏™‡∏≠‡∏á‡∏™‡∏µ ‡∏ú‡∏¥‡∏ß‡πÄ‡∏Ç‡πâ‡∏° 

‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á 11 ‡∏™‡∏µ‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏â‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤

‡∏ó‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ü‡∏∑‡πâ‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏ß‡πÅ‡∏Å‡πâ‡∏°‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏ô‡πâ‡∏≠‡∏á‡∏™‡∏µ‡∏™‡∏ß‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏Å ‡∏ó‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≤‡∏ú‡∏™‡∏° ‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏±‡∏á
""", unsafe_allow_html=True) 

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

PERSIST_DIR = "chroma_db"
llm_ready = True
db = None

if OPENAI_API_KEY:
    try:
        emb = OpenAIEmbeddings(model="text-embedding-3-small", openai_api_key=OPENAI_API_KEY)
        db = Chroma(
            persist_directory=PERSIST_DIR,
            embedding_function=emb,
            collection_name="kage_products"
        )
        llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0.1, openai_api_key=OPENAI_API_KEY)
    except Exception as e:
        llm_ready = False
        st.session_state.setdefault("_internal_errors", []).append(traceback.format_exc())
else:
    llm_ready = False

prompt_template = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏®‡∏´‡∏ç‡∏¥‡∏á ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ KAGE ‚Äî ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏î‡∏≤‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û

Context:
----
{context}
----

User: {question}

Instructions:
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô 2‚Äì4 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏µ ‡∏Ç‡∏ô‡∏≤‡∏î ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞
"""

def build_prompt(retrieved_docs):
    context = ""
    for idx, doc in enumerate(retrieved_docs, 1):
        meta = getattr(doc, "metadata", {}) or {}
        source_file = meta.get("source_file", "unknown")
        page_content = getattr(doc, "page_content", str(doc))
        context += f"[{idx}] ({source_file}) {page_content}\n"
    return context

def answer_question(question, product_id=None, k=6):
    """
    ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ (FIXED_PRODUCT_ID)
    - product_id: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å override ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô FIXED_PRODUCT_ID (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    - k: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô chunk ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á
    """

    product_id = FIXED_PRODUCT_ID 
    filter = {"product_id": product_id}

    if not llm_ready or db is None:
        return {"answer": "‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å API Key ‡∏´‡∏£‡∏∑‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LLM ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENAI_API_KEY ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå DB.", "sources": []}

    try:
        try:
            retrieved_docs = db.similarity_search(question, k=k, filter=filter)
        except TypeError:
            retrieved_docs = db.similarity_search(query=question, k=k, filter=filter)
    except Exception as e:
        st.session_state.setdefault("_internal_errors", []).append(traceback.format_exc())
        return {"answer": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "sources": []}

    context_text = build_prompt(retrieved_docs) if retrieved_docs else " (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ) "

    problem_keywords = ["‡πÄ‡∏™‡∏µ‡∏¢", "‡∏û‡∏±‡∏á", "‡πÅ‡∏Å‡πâ", "‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î", "‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á", "‡∏•‡πâ‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏á"]
    is_problem = any(word in question.lower() for word in problem_keywords)

    custom_prompt = prompt_template

    try:
        prompt_obj = PromptTemplate(input_variables=["context", "question"], template=custom_prompt)
        prompt_text = prompt_obj.format(context=context_text, question=question)
        answer = llm.predict(prompt_text)
    except Exception as e:
        st.session_state.setdefault("_internal_errors", []).append(traceback.format_exc())
        return {"answer": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• LLM ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°", "sources": []}

    sources = []
    for doc in retrieved_docs:
        meta = getattr(doc, "metadata", {}) or {}
        sources.append({"source_file": meta.get("source_file", "unknown"), "chunk_id": meta.get("chunk_id", "unknown")})

    return {"answer": answer, "sources": sources}

def display_chat_message_content(message):
    content = message["content"]
    timestamp = message.get("time", "") 
    
    full_content = f"<span style='font-size: 0.8em; color: gray;'>({timestamp})</span> {content}"
    
    st.markdown(full_content, unsafe_allow_html=True) 

chat_container = st.container()

with chat_container:
    for msg in st.session_state[CURRENT_PAGE_KEY]:
        avatar = "üíñ" if msg["role"] == "assistant" else "üôã‚Äç‚ôÄÔ∏è" 
        with st.chat_message(msg["role"], avatar=avatar):
            display_chat_message_content(msg)

prompt = st.chat_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...")

if prompt:
    current_time = datetime.now().strftime("%H:%M") 

    st.session_state[CURRENT_PAGE_KEY].append({
        "role": "user", 
        "content": prompt, 
        "sources": [], 
        "time": current_time 
    })
    
    with st.chat_message("user", avatar="üôã‚Äç‚ôÄÔ∏è"): 
        st.markdown(f"<span style='font-size: 0.8em; color: gray;'>({current_time})</span> {prompt}", unsafe_allow_html=True) 

    product_id = FIXED_PRODUCT_ID
    st.session_state["product_context"] = product_id

    with st.chat_message("assistant", avatar="üíñ"): 
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°..."):
            resp = answer_question(question=prompt, product_id=product_id)
        
        assistant_time = datetime.now().strftime("%H:%M") 

        st.markdown(f"<span style='font-size: 0.8em; color: gray;'>({assistant_time})</span> {resp['answer']}", unsafe_allow_html=True) 
        
        st.session_state[CURRENT_PAGE_KEY].append({ 
            "role":"assistant",
            "content": resp["answer"],
            "context_used": True,
            "sources": resp.get("sources", []),
            "time": assistant_time 
        })

PASTEL_BLUE = "#AEC6CF" 
ACCENT_BLUE = "#779ECB" 
WHITE = "#FFFFFF" 
LIGHT_PASTEL_BLUE = "#C7DBF0" 
BLACK = "#000000"

st.markdown("""
    <style>
        /* Import Kanit Font */
        @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap');

        /* 0. SCROLL FIX - Make the main content area scrollable if content exceeds height */
        [data-testid="stAppViewContainer"] > div > [data-testid="stVerticalBlock"] {{
            overflow-y: auto;
            max-height: calc(100vh - 100px); 
        }}

        /* 1. GLOBAL FONT FIX (Highest Specificity) */
        /* Targets the whole app and the most common text/div containers */
        body, #root, .stApp, .main, 
        [data-testid="stAppViewContainer"], 
        .main * {{
            font-family: 'Kanit', sans-serif !important;
            color: {BLACK} !important; 
        }}

        /* 2. HEADING FIXES */
        h1, h2, h3, h4, h5, h6, 
        [data-testid^="stHeader"] h1, 
        [data-testid^="stHeader"] h2
        {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 700 !important; 
        }}
        
        /* 3. PARAGRAPH/MARKDOWN FIX (Targets ALL generic text including the product description) */
        p,
        div[data-testid="stVerticalBlock"] p, 
        [data-testid="stAlert"] p,
        
        /* Fix text in input/select areas and expanders */
        label p,
        [data-baseweb="select"] *, 
        [data-baseweb="input"] *,
        [data-baseweb="textarea"] *,
        [data-baseweb="button"] *,
        [data-testid="stExpander"] div[role="button"] p 
        {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 400 !important; 
            line-height: 1.6; 
        }}
        
        /* === 4. CRITICAL CHAT BUBBLE FONT FIXES === */
        
        /* Targets all paragraph text inside a chat message, regardless of role */
        [data-testid="stChatMessage"] p {{
            font-family: 'Kanit', sans-serif !important;
            font-weight: 400 !important; 
            line-height: 1.6; 
        }}

        /* === 5. CHAT MESSAGE BOX STYLING (‡πÄ‡∏î‡∏¥‡∏°) === */
        
        /* Background & Text Color */
        body, #root, .stApp, .main, [data-testid="stAppViewContainer"], [data-testid="stSpinner"] > div {{ background-color: {WHITE} !important; }}
        section[data-testid="stSidebar"] {{ background-color: {LIGHT_PASTEL_BLUE} !important; border-right: 1px solid #CCCCCC; }}
        [data-testid="stSidebar"] * {{ color: {BLACK} !important; }}
        
        /* Message box width limit */
        [data-testid="stChatMessage"] div[data-testid="stVerticalBlock"] {{ max-width: 65% !important; }}
        
        /* Message box general shape */
        [data-testid="stChatMessage"] div.st-emotion-cache-p5m6iv {{ 
            border-radius: 15px !important;
            padding: 10px !important;
        }}
        
        /* USER: Align box right */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-user"] {{ flex-direction: row-reverse; }}
        /* ASSISTANT: Align box left */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-assistant"] {{ flex-direction: row; }}

        /* ASSISTANT: Box color */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-assistant"] div.st-emotion-cache-p5m6iv {{
            background-color: {LIGHT_PASTEL_BLUE} !important;
            color: {BLACK} !important;
        }}
        
        /* USER: Box color */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-user"] div.st-emotion-cache-p5m6iv {{
            background-color: {ACCENT_BLUE} !important;
            color: {WHITE} !important;
        }}
        
        /* USER: Text align right (Applies to Kanit text inside the box) */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-user"] div.st-emotion-cache-p5m6iv p {{
            text-align: right !important;
        }}
        
        /* ASSISTANT: Text align left (Applies to Kanit text inside the box) */
        [data-testid="stChatMessage"][data-testid^="stChatMessage-assistant"] div.st-emotion-cache-p5m6iv p {{
            text-align: left !important;
        }}
        
        /* Chat Input Area */
        [data-testid="stAppViewContainer"] > div > div {{ background-color: {WHITE} !important; }}
        [data-testid="stChatInput"] {{
            background-color: {WHITE} !important;
            border: none !important;
            padding: 10px 0 !important;
        }}
        [data-testid="stChatInput"] > div > div {{
            background-color: {WHITE} !important; 
            color: {BLACK} !important; 
            border-radius: 8px !important;
            border: none !important;
        }}
        
    </style>
""".format(PASTEL_BLUE=PASTEL_BLUE, WHITE=WHITE, LIGHT_PASTEL_BLUE=LIGHT_PASTEL_BLUE, BLACK=BLACK, ACCENT_BLUE=ACCENT_BLUE), unsafe_allow_html=True)
